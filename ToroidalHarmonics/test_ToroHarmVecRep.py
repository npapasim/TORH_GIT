# Written by Vassili Savinov on 04/03/2019
# step by step test all the parts of the ToroHarmVecRep

import unittest
from ToroHarmVecRep import ToroHarmVecRep
import numpy as np
import numpy.random as npr
import pandas as pd

class test_ToroHarmVecRep(unittest.TestCase):

    # convert toroidal coordinates to cartesian coordinates
    # this is implemented already in ToroCoords class
    # but I want to keep the testing implementation independent
    @staticmethod
    def toro_to_cart(ETA, THETA, PHI, a_val=1):
        # generate the Cartesian coordinates : Moon & Spencer "Field theory handbook" p 112
        X = a_val * (np.sinh(ETA) * np.cos(PHI)) / (np.cosh(ETA) - np.cos(THETA))
        Y = a_val * (np.sinh(ETA) * np.sin(PHI)) / (np.cosh(ETA) - np.cos(THETA))
        Z = a_val * (np.sin(THETA)) / (np.cosh(ETA) - np.cos(THETA))

        return X, Y, Z

    # the constructor
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)# initialize parent class
        # prepare testing variables

    """
    test the psi tensors generated by the program
    this include the basic psi functions as well as their derivatives up to second order
    the idea is to use Mathematica as an alternative to computing these harmonics
    """
    def test_psi_tensors(self, try_count = 50, dim_size = 3, eta_max = 13, a_val = 1.0, rtol = 1e-6):
        # load the datat computed by mathematica
        col_names = ['eta', 'theta', 'phi', 'n', 'm', 'psi_first_re', 'psi_first_im', 'psi_second_re', 'psi_second_im',
                     'dpsi_deta_first_re', 'dpsi_deta_first_im', 'dpsi_deta_second_re', 'dpsi_deta_second_im',
                     'dpsi_dtheta_first_re', 'dpsi_dtheta_first_im', 'dpsi_dtheta_second_re', 'dpsi_dtheta_second_im',
                     'd2psi_deta2_first_re', 'd2psi_deta2_first_im', 'd2psi_deta2_second_re', 'd2psi_deta2_second_im',
                     'd2psi_dtheta2_first_re', 'd2psi_dtheta2_first_im', 'd2psi_dtheta2_second_re', 'd2psi_dtheta2_second_im',
                     'd2psi_detatheta_first_re', 'd2psi_detatheta_first_im', 'd2psi_detatheta_second_re', 'd2psi_detatheta_second_im']
        #
        validData = pd.read_csv('ToroidalHarmonicsDefinition_Convention\\torHarm.csv', names=col_names)

        # load data
        etaVec = np.array(validData['eta'])
        thetaVec = np.array(validData['theta'])
        phiVec = np.array(validData['phi'])

        nVec = np.array(validData['n'], dtype=np.uint)
        mVec = np.array(validData['m'], dtype=np.uint)

        # get cartesian versions
        xVec, yVec, zVec = test_ToroHarmVecRep.toro_to_cart(etaVec, thetaVec, phiVec, a_val=a_val)

        # prepare the tensors
        toro_vec_rep = ToroHarmVecRep(xVec, yVec, zVec, 0 * xVec, 0 * xVec, 0 * xVec, nCount=np.max(nVec)+1, mCount=np.max(mVec)+1)

        # now compare the psi_tensor
        # computed by Python
        comp_psi_first = np.array(
            [toro_vec_rep.psiTens[0, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        comp_psi_second = np.array(
            [toro_vec_rep.psiTens[1, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        # tagret
        tgt_psi_first_re = np.array(validData['psi_first_re'])
        tgt_psi_first_im = np.array(validData['psi_first_im'])
        tgt_psi_second_re = np.array(validData['psi_second_re'])
        tgt_psi_second_im = np.array(validData['psi_second_im'])
        #
        self.assertTrue( np.all(np.isclose(np.real(comp_psi_first), tgt_psi_first_re, rtol=rtol)) )
        self.assertTrue( np.all(np.isclose(np.imag(comp_psi_first), tgt_psi_first_im, rtol=rtol)) )
        self.assertTrue( np.all(np.isclose(np.real(comp_psi_second), tgt_psi_second_re, rtol=rtol)) )
        self.assertTrue( np.all(np.isclose(np.imag(comp_psi_second), tgt_psi_second_im, rtol=rtol)) )

        # next the derivatives of the psi tensor dpsi_deta
        comp_dpsi_deta_first = np.array(
            [toro_vec_rep.D_psi_D_eta_Tens[0, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        comp_dpsi_deta_second = np.array(
            [toro_vec_rep.D_psi_D_eta_Tens[1, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        # tagret
        tgt_dpsi_deta_first_re = np.array(validData['dpsi_deta_first_re'])
        tgt_dpsi_deta_first_im = np.array(validData['dpsi_deta_first_im'])
        tgt_dpsi_deta_second_re = np.array(validData['dpsi_deta_second_re'])
        tgt_dpsi_deta_second_im = np.array(validData['dpsi_deta_second_im'])
        #
        self.assertTrue(np.all(np.isclose(np.real(comp_dpsi_deta_first), tgt_dpsi_deta_first_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_dpsi_deta_first), tgt_dpsi_deta_first_im, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.real(comp_dpsi_deta_second), tgt_dpsi_deta_second_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_dpsi_deta_second), tgt_dpsi_deta_second_im, rtol=rtol)))

        # next the derivatives of the psi tensor dpsi_dtheta
        comp_dpsi_dtheta_first = np.array(
            [toro_vec_rep.D_psi_D_theta_Tens[0, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        comp_dpsi_dtheta_second = np.array(
            [toro_vec_rep.D_psi_D_theta_Tens[1, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        # tagret
        tgt_dpsi_dtheta_first_re = np.array(validData['dpsi_dtheta_first_re'])
        tgt_dpsi_dtheta_first_im = np.array(validData['dpsi_dtheta_first_im'])
        tgt_dpsi_dtheta_second_re = np.array(validData['dpsi_dtheta_second_re'])
        tgt_dpsi_dtheta_second_im = np.array(validData['dpsi_dtheta_second_im'])
        #
        self.assertTrue(np.all(np.isclose(np.real(comp_dpsi_dtheta_first), tgt_dpsi_dtheta_first_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_dpsi_dtheta_first), tgt_dpsi_dtheta_first_im, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.real(comp_dpsi_dtheta_second), tgt_dpsi_dtheta_second_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_dpsi_dtheta_second), tgt_dpsi_dtheta_second_im, rtol=rtol)))

        # next the derivatives of the psi tensor d2psi_deta2
        comp_d2psi_deta2_first = np.array(
            [toro_vec_rep.D2_psi_D_eta2_Tens[0, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        comp_d2psi_deta2_second = np.array(
            [toro_vec_rep.D2_psi_D_eta2_Tens[1, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        # tagret
        tgt_d2psi_deta2_first_re = np.array(validData['d2psi_deta2_first_re'])
        tgt_d2psi_deta2_first_im = np.array(validData['d2psi_deta2_first_im'])
        tgt_d2psi_deta2_second_re = np.array(validData['d2psi_deta2_second_re'])
        tgt_d2psi_deta2_second_im = np.array(validData['d2psi_deta2_second_im'])
        #
        self.assertTrue(np.all(np.isclose(np.real(comp_d2psi_deta2_first), tgt_d2psi_deta2_first_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_d2psi_deta2_first), tgt_d2psi_deta2_first_im, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.real(comp_d2psi_deta2_second), tgt_d2psi_deta2_second_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_d2psi_deta2_second), tgt_d2psi_deta2_second_im, rtol=rtol)))

        # next the derivatives of the psi tensor d2psi_dtheta2
        comp_d2psi_dtheta2_first = np.array(
            [toro_vec_rep.D2_psi_D_theta2_Tens[0, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        comp_d2psi_dtheta2_second = np.array(
            [toro_vec_rep.D2_psi_D_theta2_Tens[1, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        # tagret
        tgt_d2psi_dtheta2_first_re = np.array(validData['d2psi_dtheta2_first_re'])
        tgt_d2psi_dtheta2_first_im = np.array(validData['d2psi_dtheta2_first_im'])
        tgt_d2psi_dtheta2_second_re = np.array(validData['d2psi_dtheta2_second_re'])
        tgt_d2psi_dtheta2_second_im = np.array(validData['d2psi_dtheta2_second_im'])
        #
        self.assertTrue(np.all(np.isclose(np.real(comp_d2psi_dtheta2_first), tgt_d2psi_dtheta2_first_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_d2psi_dtheta2_first), tgt_d2psi_dtheta2_first_im, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.real(comp_d2psi_dtheta2_second), tgt_d2psi_dtheta2_second_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_d2psi_dtheta2_second), tgt_d2psi_dtheta2_second_im, rtol=rtol)))

        # next the derivatives of the psi tensor d2psi_detatheta
        comp_d2psi_detatheta_first = np.array(
            [toro_vec_rep.D2_psi_D_eta_theta_Tens[0, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        comp_d2psi_detatheta_second = np.array(
            [toro_vec_rep.D2_psi_D_eta_theta_Tens[1, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        # tagret
        tgt_d2psi_detatheta_first_re = np.array(validData['d2psi_detatheta_first_re'])
        tgt_d2psi_detatheta_first_im = np.array(validData['d2psi_detatheta_first_im'])
        tgt_d2psi_detatheta_second_re = np.array(validData['d2psi_detatheta_second_re'])
        tgt_d2psi_detatheta_second_im = np.array(validData['d2psi_detatheta_second_im'])
        #
        self.assertTrue(np.all(np.isclose(np.real(comp_d2psi_detatheta_first), tgt_d2psi_detatheta_first_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_d2psi_detatheta_first), tgt_d2psi_detatheta_first_im, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.real(comp_d2psi_detatheta_second), tgt_d2psi_detatheta_second_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_d2psi_detatheta_second), tgt_d2psi_detatheta_second_im, rtol=rtol)))

    """
    One of the first things to be done in the test_ToroHarmVecRep
    is to convert from Cartesian coordinates to toroidal coordinates
    
    test that this works as it should
    
    try_count = number of time I will try to test
    dim_size = number of the single dimension for the coordinate cubes
    eta_max = maximum size for eta
    a_val the scale for toroidal coordinates
    rtol the relative tolrance to use in comparisons
    """
    def test_toro_coord(self, try_count = 5, dim_size = 2, eta_max = 13, a_val = 1.0, rtol = 1e-6):

        for iTry in range(try_count):
            # generate the positions in toroidal coordinates
            ETA = npr.rand(dim_size, dim_size, dim_size) * eta_max + 1e-9 # 0...eta_max
            THETA = (npr.rand(dim_size, dim_size, dim_size) * 2 * np.pi) - np.pi # -pi...pi
            PHI = npr.rand(dim_size, dim_size, dim_size) * 2 * np.pi # 0 ... 2pi

            X, Y, Z = test_ToroHarmVecRep.toro_to_cart(ETA, THETA, PHI, a_val=a_val)

            # now get the decomposition
            toro_vec_rep = ToroHarmVecRep(X, Y, Z, 0 * X, 0 * X, 0 * X)

            # compare the new values, use cos/sin to avoid phase unwrapping on angles
            self.assertTrue(np.all(np.isclose(toro_vec_rep.etaVec, ETA.flatten(), rtol=rtol)))
            # use of sin and cos allows to avoid unwrapping issues
            self.assertTrue(np.all(np.isclose( np.sin(toro_vec_rep.thetaVec), np.sin(THETA.flatten()), rtol=rtol)))
            self.assertTrue(np.all(np.isclose( np.cos(toro_vec_rep.thetaVec), np.cos(THETA.flatten()), rtol=rtol)))
            # use of sin and cos allows to avoid unwrapping issues
            self.assertTrue(np.all(np.isclose( np.sin(toro_vec_rep.phiVec), np.sin(PHI.flatten()), rtol=rtol)))
            self.assertTrue(np.all(np.isclose( np.cos(toro_vec_rep.phiVec), np.cos(PHI.flatten()), rtol=rtol)))

            # also within this time we compute the r2 within the initialization
            self.assertTrue(np.all(np.isclose(toro_vec_rep.r2Vec, (X**2+Y**2+Z**2).flatten(), rtol=rtol)))

            # also computing the Jacobian for the toroidal coordinates, i.e.
            # \frac{\partial(xyz)}{\partial(\eta\theta\phi)}
            # see the corresponding Mathematica file
            jacobian = a_val**3 * np.sinh(ETA)/(np.cosh(ETA)-np.cos(THETA))**3
            self.assertTrue(np.all(np.isclose(toro_vec_rep.jacobian, jacobian.flatten(), rtol=rtol)))

            print('test_toro_coord run = %d' % iTry)

    def test_conraction_tens_div_rPsi(self, a_val=1.0, rtol=1e-6):
        # load the datat computed by mathematica
        col_names = ['eta', 'theta', 'phi', 'n', 'm',
                     'div_rPsi_first_re', 'div_rPsi_first_im',
                     'div_rPsi_second_re', 'div_rPsi_second_im']
        #
        validData = pd.read_csv('ToroidalHarmonicsDefinition_Convention\\contrTens_div_rPsi.csv', names=col_names)

        # load data
        etaVec = np.array(validData['eta'])
        thetaVec = np.array(validData['theta'])
        phiVec = np.array(validData['phi'])

        nVec = np.array(validData['n'], dtype=np.uint)
        mVec = np.array(validData['m'], dtype=np.uint)

        # get cartesian versions
        xVec, yVec, zVec = test_ToroHarmVecRep.toro_to_cart(etaVec, thetaVec, phiVec, a_val=a_val)

        # prepare the tensors
        toro_vec_rep = ToroHarmVecRep(xVec, yVec, zVec, 0 * xVec, 0 * xVec, 0 * xVec, nCount=np.max(nVec) + 1,
                                      mCount=np.max(mVec) + 1)

        # now compare the psi_tensor
        # computed by Python
        comp_div_rPsi_first = np.array(
            [toro_vec_rep.divContr_Tens[0, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        comp_div_rPsi_second = np.array(
            [toro_vec_rep.divContr_Tens[1, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        # tagret
        tgt_div_rPsi_first_re = np.array(validData['div_rPsi_first_re'])
        tgt_div_rPsi_first_im = np.array(validData['div_rPsi_first_im'])
        tgt_div_rPsi_second_re = np.array(validData['div_rPsi_second_re'])
        tgt_div_rPsi_second_im = np.array(validData['div_rPsi_second_im'])
        #
        self.assertTrue(np.all(np.isclose(np.real(comp_div_rPsi_first), tgt_div_rPsi_first_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_div_rPsi_first), tgt_div_rPsi_first_im, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.real(comp_div_rPsi_second), tgt_div_rPsi_second_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_div_rPsi_second), tgt_div_rPsi_second_im, rtol=rtol)))

    def test_conraction_tens_r_dot_curl_L_Psi(self, a_val=1.0, rtol=1e-6):
        # load the datat computed by mathematica
        col_names = ['eta', 'theta', 'phi', 'n', 'm',
                     'r_curl_L_psi_first_re', 'r_curl_L_psi_first_im',
                     'r_curl_L_psi_second_re', 'r_curl_L_psi_second_im']
        #
        validData = pd.read_csv('ToroidalHarmonicsDefinition_Convention\\contrTens_rCurlL_psi.csv', names=col_names)

        # load data
        etaVec = np.array(validData['eta'])
        thetaVec = np.array(validData['theta'])
        phiVec = np.array(validData['phi'])

        nVec = np.array(validData['n'], dtype=np.uint)
        mVec = np.array(validData['m'], dtype=np.uint)

        # get cartesian versions
        xVec, yVec, zVec = test_ToroHarmVecRep.toro_to_cart(etaVec, thetaVec, phiVec, a_val=a_val)

        # prepare the tensors
        toro_vec_rep = ToroHarmVecRep(xVec, yVec, zVec, 0 * xVec, 0 * xVec, 0 * xVec, nCount=np.max(nVec) + 1,
                                      mCount=np.max(mVec) + 1)

        # now compare the psi_tensor
        # computed by Python
        comp_r_curl_L_psi_first = np.array(
            [toro_vec_rep.rDotContr_Tens[0, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        comp_r_curl_L_psi_second = np.array(
            [toro_vec_rep.rDotContr_Tens[1, nVec[iCell], mVec[iCell], iCell] for iCell in range(len(xVec))])
        # tagret
        tgt_r_curl_L_psi_first_re = np.array(validData['r_curl_L_psi_first_re'])
        tgt_r_curl_L_psi_first_im = np.array(validData['r_curl_L_psi_first_im'])
        tgt_r_curl_L_psi_second_re = np.array(validData['r_curl_L_psi_second_re'])
        tgt_r_curl_L_psi_second_im = np.array(validData['r_curl_L_psi_second_im'])
        #
        self.assertTrue(np.all(np.isclose(np.real(comp_r_curl_L_psi_first), tgt_r_curl_L_psi_first_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_r_curl_L_psi_first), tgt_r_curl_L_psi_first_im, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.real(comp_r_curl_L_psi_second), tgt_r_curl_L_psi_second_re, rtol=rtol)))
        self.assertTrue(np.all(np.isclose(np.imag(comp_r_curl_L_psi_second), tgt_r_curl_L_psi_second_im, rtol=rtol)))

    """
    Test wether the HarmRep can get the correct amplitude from a 
    field that only has the rPsi term
    decomposition has to be to less sign figs simply because of the temperament of the functions
    """
    def test_r_psi_contribution(self, a_val=1, rtol=2e-3):

        # load the datat computed by mathematica
        col_names = ['eta', 'theta', 'phi', 'n', 'm',
                     'div_r_psi_first_re', 'div_r_psi_first_im',
                     'div_r_psi_second_re', 'div_r_psi_second_im',
                     'r2_psi_first_re', 'r2_psi_first_im',
                     'r2_psi_second_re', 'r2_psi_second_im']

        iFile=1

        while True: # do while
            #
            try:
                validData = pd.read_csv('ToroidalHarmonicsDefinition_Convention\\rPsi_term_v%d.csv' % iFile, names=col_names)
            except:
                break # no such file

            # load data
            etaVec = np.array(validData['eta'])
            thetaVec = np.array(validData['theta'])
            phiVec = np.array(validData['phi'])
            # only one value for n,m
            choiceN = np.array(validData['n'][0], dtype=np.uint)
            choiceM = np.array(validData['m'][0], dtype=np.uint)

            # get cartesian versions
            xVec, yVec, zVec = test_ToroHarmVecRep.toro_to_cart(etaVec, thetaVec, phiVec, a_val=a_val)

            # extract scrambled field, it is always just one rPsi term with amplitude 1
            # div.F
            div_r_psi_first = np.array(validData['div_r_psi_first_re'], dtype=np.complex) + \
                              1j*np.array(validData['div_r_psi_first_im'], dtype=np.complex)
            div_r_psi_second = np.array(validData['div_r_psi_second_re'], dtype=np.complex) + \
                             1j * np.array(validData['div_r_psi_second_im'], dtype=np.complex)
            # r.F (assuming a_val=1)
            r2_psi_first = np.array(validData['r2_psi_first_re'], dtype=np.complex) + \
                              1j * np.array(validData['r2_psi_first_im'], dtype=np.complex)
            r2_psi_second = np.array(validData['r2_psi_second_re'], dtype=np.complex) + \
                              1j * np.array(validData['r2_psi_second_im'], dtype=np.complex)

            # different orders of magntidue, don't mix them


            #### first order
            # prepare the tensors
            toro_vec_rep_first = ToroHarmVecRep(xVec, yVec, zVec,
                                          raw_divFTens=div_r_psi_first, raw_rDotFTens=r2_psi_first, raw_LDotFTens=0 * xVec,
                                          nCount=choiceN+4 + 1, mCount=choiceM+4 + 1)

            tgt_aCoeff_Tens = toro_vec_rep_first.aCoeff_Tens*0
            tgt_aCoeff_Tens[0,choiceN, choiceM]=1.0
            tgt_bCoeff_Tens = toro_vec_rep_first.bCoeff_Tens * 0
            tgt_cCoeff_Tens = toro_vec_rep_first.cCoeff_Tens * 0
            self.assertTrue(np.all(np.isclose(0.0*tgt_aCoeff_Tens, np.abs(toro_vec_rep_first.aCoeff_Tens-tgt_aCoeff_Tens), rtol=rtol, atol=rtol)))
            self.assertTrue(np.all(np.isclose(0.0*tgt_aCoeff_Tens, np.abs(toro_vec_rep_first.bCoeff_Tens - tgt_bCoeff_Tens), rtol=rtol, atol=rtol)))
            self.assertTrue(np.all(np.isclose(0.0*tgt_aCoeff_Tens, np.abs(toro_vec_rep_first.cCoeff_Tens - tgt_cCoeff_Tens), rtol=rtol, atol=rtol)))

            #### second order
            # prepare the tensors
            toro_vec_rep_second = ToroHarmVecRep(xVec, yVec, zVec,
                                                raw_divFTens=div_r_psi_second, raw_rDotFTens=r2_psi_second,
                                                raw_LDotFTens=0 * xVec,
                                                nCount=choiceN +4+ 1, mCount=choiceM+4 + 1)

            tgt_aCoeff_Tens = toro_vec_rep_second.aCoeff_Tens * 0
            tgt_aCoeff_Tens[1, choiceN, choiceM] = 1.0
            tgt_bCoeff_Tens = toro_vec_rep_second.bCoeff_Tens * 0
            tgt_cCoeff_Tens = toro_vec_rep_second.cCoeff_Tens * 0
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_second.aCoeff_Tens - tgt_aCoeff_Tens), rtol=rtol, atol=rtol)))
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_second.bCoeff_Tens - tgt_bCoeff_Tens), rtol=rtol, atol=rtol)))
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_second.cCoeff_Tens - tgt_cCoeff_Tens), rtol=rtol, atol=rtol)))

            iFile += 1

    """
        Test wether the HarmRep can get the correct amplitude from a 
        field that only has the LPsi term
        decomposition has to be to less sign figs simply because of the temperament of the functions
        """

    def test_L_psi_contribution(self, a_val=1, rtol=5e-5):

        # load the datat computed by mathematica
        col_names = ['eta', 'theta', 'phi', 'n', 'm',
                     'l2_psi_first_re', 'l2_psi_first_im',
                     'l2_psi_second_re', 'l2_psi_second_im']

        iFile = 1

        while True:  # do while
            #
            try:
                validData = pd.read_csv('ToroidalHarmonicsDefinition_Convention\\L2Psi_term_v%d.csv' % iFile,
                                        names=col_names)
            except:
                break  # no such file

            # load data
            etaVec = np.array(validData['eta'])
            thetaVec = np.array(validData['theta'])
            phiVec = np.array(validData['phi'])
            # only one value for n,m
            choiceN = np.array(validData['n'][0], dtype=np.uint)
            choiceM = np.array(validData['m'][0], dtype=np.uint)

            # get cartesian versions
            xVec, yVec, zVec = test_ToroHarmVecRep.toro_to_cart(etaVec, thetaVec, phiVec, a_val=a_val)

            # extract scrambled field, it is always just one rPsi term with amplitude 1
            # div.F
            l2_psi_first = np.array(validData['l2_psi_first_re'], dtype=np.complex) + \
                              1j * np.array(validData['l2_psi_first_im'], dtype=np.complex)
            l2_psi_second = np.array(validData['l2_psi_second_re'], dtype=np.complex) + \
                               1j * np.array(validData['l2_psi_second_im'], dtype=np.complex)

            # different orders of magntidue, don't mix them

            #### first order
            # prepare the tensors
            toro_vec_rep_first = ToroHarmVecRep(xVec, yVec, zVec,
                                                raw_divFTens=0 * xVec, raw_rDotFTens=0 * xVec,
                                                raw_LDotFTens=l2_psi_first,
                                                nCount=choiceN + 4 + 1, mCount=choiceM + 4 + 1)

            tgt_aCoeff_Tens = toro_vec_rep_first.aCoeff_Tens * 0
            tgt_bCoeff_Tens = toro_vec_rep_first.bCoeff_Tens * 0
            tgt_bCoeff_Tens[0, choiceN, choiceM] = 1.0
            tgt_cCoeff_Tens = toro_vec_rep_first.cCoeff_Tens * 0
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_first.aCoeff_Tens - tgt_aCoeff_Tens), rtol=rtol,
                           atol=rtol)))
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_first.bCoeff_Tens - tgt_bCoeff_Tens), rtol=rtol,
                           atol=rtol)))
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_first.cCoeff_Tens - tgt_cCoeff_Tens), rtol=rtol,
                           atol=rtol)))

            #### second
            # prepare the tensors
            toro_vec_rep_second = ToroHarmVecRep(xVec, yVec, zVec,
                                                raw_divFTens=0 * xVec, raw_rDotFTens=0 * xVec,
                                                raw_LDotFTens=l2_psi_second,
                                                nCount=choiceN + 4 + 1, mCount=choiceM + 4 + 1)

            tgt_aCoeff_Tens = toro_vec_rep_second.aCoeff_Tens * 0
            tgt_bCoeff_Tens = toro_vec_rep_second.bCoeff_Tens * 0
            tgt_bCoeff_Tens[1, choiceN, choiceM] = 1.0
            tgt_cCoeff_Tens = toro_vec_rep_second.cCoeff_Tens * 0
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_second.aCoeff_Tens - tgt_aCoeff_Tens), rtol=rtol,
                           atol=rtol)))
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_second.bCoeff_Tens - tgt_bCoeff_Tens), rtol=rtol,
                           atol=rtol)))
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_second.cCoeff_Tens - tgt_cCoeff_Tens), rtol=rtol,
                           atol=rtol)))

            iFile += 1

    """
           Test wether the HarmRep can get the correct amplitude from a 
           field that only has the curlLPsi term
           decomposition has to be to less sign figs simply because of the temperament of the functions
           """

    def test_curlL_psi_contribution(self, a_val=1, rtol=2e-6):

        # load the datat computed by mathematica
        col_names = ['eta', 'theta', 'phi', 'n', 'm',
                     'rCurlL_psi_first_re', 'rCurlL_psi_first_im',
                     'rCurlL_psi_second_re', 'rCurlL_psi_second_im']

        iFile = 1

        while True:  # do while
            #
            try:
                validData = pd.read_csv('ToroidalHarmonicsDefinition_Convention\\rCurlLPsi_term_v%d.csv' % iFile,
                                        names=col_names)
            except:
                break  # no such file

            # load data
            etaVec = np.array(validData['eta'])
            thetaVec = np.array(validData['theta'])
            phiVec = np.array(validData['phi'])
            # only one value for n,m
            choiceN = np.array(validData['n'][0], dtype=np.uint)
            choiceM = np.array(validData['m'][0], dtype=np.uint)

            # get cartesian versions
            xVec, yVec, zVec = test_ToroHarmVecRep.toro_to_cart(etaVec, thetaVec, phiVec, a_val=a_val)

            # extract scrambled field, it is always just one rPsi term with amplitude 1
            #
            rCurlL_psi_first = np.array(validData['rCurlL_psi_first_re'], dtype=np.complex) + \
                           1j * np.array(validData['rCurlL_psi_first_im'], dtype=np.complex)
            rCurlL_psi_second = np.array(validData['rCurlL_psi_second_re'], dtype=np.complex) + \
                            1j * np.array(validData['rCurlL_psi_second_im'], dtype=np.complex)

            # different orders of magntidue, don't mix them

            #### first order
            # prepare the tensors
            toro_vec_rep_first = ToroHarmVecRep(xVec, yVec, zVec,
                                                raw_divFTens=0 * xVec, raw_rDotFTens=rCurlL_psi_first,
                                                raw_LDotFTens=0 * xVec,
                                                nCount=choiceN + 4 + 1, mCount=choiceM + 4 + 1)

            tgt_aCoeff_Tens = toro_vec_rep_first.aCoeff_Tens * 0
            tgt_bCoeff_Tens = toro_vec_rep_first.bCoeff_Tens * 0
            tgt_cCoeff_Tens = toro_vec_rep_first.cCoeff_Tens * 0
            tgt_cCoeff_Tens[0, choiceN, choiceM] = 1.0
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_first.aCoeff_Tens - tgt_aCoeff_Tens), rtol=rtol,
                           atol=rtol)))
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_first.bCoeff_Tens - tgt_bCoeff_Tens), rtol=rtol,
                           atol=rtol)))
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_first.cCoeff_Tens - tgt_cCoeff_Tens), rtol=rtol,
                           atol=rtol)))

            #### second
            # prepare the tensors
            toro_vec_rep_second = ToroHarmVecRep(xVec, yVec, zVec,
                                                raw_divFTens=0 * xVec, raw_rDotFTens=rCurlL_psi_second,
                                                raw_LDotFTens=0 * xVec,
                                                nCount=choiceN + 4 + 1, mCount=choiceM + 4 + 1)

            tgt_aCoeff_Tens = toro_vec_rep_second.aCoeff_Tens * 0
            tgt_bCoeff_Tens = toro_vec_rep_second.bCoeff_Tens * 0
            tgt_cCoeff_Tens = toro_vec_rep_second.cCoeff_Tens * 0
            tgt_cCoeff_Tens[1, choiceN, choiceM] = 1.0
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_second.aCoeff_Tens - tgt_aCoeff_Tens), rtol=rtol,
                           atol=rtol)))
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_second.bCoeff_Tens - tgt_bCoeff_Tens), rtol=rtol,
                           atol=rtol)))
            self.assertTrue(np.all(
                np.isclose(0.0 * tgt_aCoeff_Tens, np.abs(toro_vec_rep_second.cCoeff_Tens - tgt_cCoeff_Tens), rtol=rtol,
                           atol=rtol)))

            iFile+=1